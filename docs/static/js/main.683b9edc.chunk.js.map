{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomValue","array","max","length","Math","floor","random","fetchRandomGiphy","tag","a","request","url","qs","api_key","rating","json","response","data","image_url","fetchRandomGiphyBySearch","query","q","limit","images","original","RandomGiphy","tags","theme","useState","src","setSrc","fetchNew","useCallback","concat","join","then","useEffect","className","alt","onClick","fistOfFiveData","App","URL","document","location","searchParams","get","id","type","name","defaultValue","placeholder","map","level","href","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sZAQMA,G,OAAc,SAAAC,GAAK,OAAIA,GAFXC,EAE2BD,EAAME,OAF1BC,KAAKC,MAAMD,KAAKE,SAAWJ,KAAlC,IAAAA,IAIZK,EAAgB,sCAAG,WAAMC,GAAN,eAAAC,EAAA,qEACAC,IAAQ,CAC7BC,IAAK,uCACLC,GAAI,CACFC,QAVgB,mCAWhBL,MACAM,OAAQ,KAEVC,MAAM,IARe,cACjBC,EADiB,yBAWhBA,EAASC,KAAKC,WAXE,yCAAH,sDAchBC,EAAwB,sCAAG,WAAMC,GAAN,eAAAX,EAAA,qEACRC,IAAQ,CAC7BC,IAAK,uCACLC,GAAI,CACFC,QAxBgB,mCAyBhBQ,EAAGD,EACHE,MAAO,EACPR,OAAQ,KAEVC,MAAM,IATuB,cACzBC,EADyB,yBAYxBhB,EAAYgB,EAASC,MAAMM,OAAOC,SAASb,KAZnB,yCAAH,sDAexBc,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAY,EACjBC,qBADiB,mBAChCC,EADgC,KAC3BC,EAD2B,KAEjCC,EAAWC,sBAAY,WACvBL,EAEFR,EAAyB,CAACQ,GAAOM,OAAOP,GAAMQ,KAAK,MAAMC,KAAKL,GAE9DvB,EAAiBP,EAAY0B,IAAOS,KAAKL,IAE1C,CAACH,EAAOD,IAIX,OAFAU,oBAAU,kBAAML,KAAY,CAACA,IAG3B,yBAAKM,UAAU,gBACb,yBAAKR,IAAKA,EAAKS,IAAG,UAAK,CAACX,GAAOM,OAAOP,GAAMQ,KAAK,QACjD,6BACE,4BAAQK,QAASR,GAAjB,mBAMFS,EAAiB,CACrB,CAAC,EAAG,CAAC,UAAW,MAAO,aACvB,CAAC,EAAG,CAAC,UACL,CAAC,EAAG,CAAC,QACL,CAAC,EAAG,CAAC,QACL,CAAC,EAAG,CAAC,MAAO,eAoCCC,MAjCf,WACE,IACMd,EADS,IAAIe,IAAIC,SAASC,UAAUC,aACrBC,IAAI,SAEzB,OACE,yBAAKC,GAAG,MAAMV,UAAU,OACtB,8BACE,2BACEW,KAAK,OACLC,KAAK,QACLC,aAAcvB,EACdwB,YAAY,qBAEd,2BAAOH,KAAK,YAEbR,EAAeY,IAAI,mCAAEC,EAAF,KAAS3B,EAAT,YAClB,yBAAKqB,GAAE,gBAAWM,GAAShB,UAAU,kBACnC,4BAAKgB,GACL,kBAAC,EAAD,CAAa1B,MAAOA,EAAOD,KAAMA,IACjC,yBAAKW,UAAU,uBACZgB,EAAQ,GACP,uBAAGhB,UAAU,YAAYiB,KAAI,iBAAYD,EAAQ,IAAjD,UAIS,IAAVA,GAAe,uBAAGC,KAAK,QAAR,qBCnFRC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.683b9edc.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport request from \"request-promise-native\";\nimport \"./App.css\";\n\nconst GIPHY_API_KEY = \"DDNpg13GKnbYe1Dn1aNonhFJTq3ufxGP\";\n\nconst randomInt = max => Math.floor(Math.random() * max);\n\nconst randomValue = array => array[randomInt(array.length)];\n\nconst fetchRandomGiphy = async tag => {\n  const response = await request({\n    url: \"https://api.giphy.com/v1/gifs/random\",\n    qs: {\n      api_key: GIPHY_API_KEY,\n      tag,\n      rating: \"g\"\n    },\n    json: true\n  });\n\n  return response.data.image_url;\n};\n\nconst fetchRandomGiphyBySearch = async query => {\n  const response = await request({\n    url: \"https://api.giphy.com/v1/gifs/search\",\n    qs: {\n      api_key: GIPHY_API_KEY,\n      q: query,\n      limit: 5,\n      rating: \"g\"\n    },\n    json: true\n  });\n\n  return randomValue(response.data).images.original.url;\n};\n\nconst RandomGiphy = ({ tags, theme }) => {\n  const [src, setSrc] = useState();\n  const fetchNew = useCallback(() => {\n    if (theme) {\n      // search gives better results than random endpoint if we want to keep it to a theme\n      fetchRandomGiphyBySearch([theme].concat(tags).join(\" \")).then(setSrc);\n    } else {\n      fetchRandomGiphy(randomValue(tags)).then(setSrc);\n    }\n  }, [theme, tags]);\n\n  useEffect(() => fetchNew(), [fetchNew]);\n\n  return (\n    <div className=\"random-giphy\">\n      <img src={src} alt={`${[theme].concat(tags).join(\" \")}`}/>\n      <div>\n        <button onClick={fetchNew}>ðŸŽ²</button>\n      </div>\n    </div>\n  );\n};\n\nconst fistOfFiveData = [\n  [5, [\"victory\", \"win\", \"ecstatic\"]],\n  [4, [\"happy\"]],\n  [3, [\"meh\"]],\n  [2, [\"sad\"]],\n  [1, [\"sad\", \"depressed\"]]\n];\n\nfunction App() {\n  const params = new URL(document.location).searchParams;\n  const theme = params.get(\"theme\");\n\n  return (\n    <div id=\"top\" className=\"App\">\n      <form>\n        <input\n          type=\"text\"\n          name=\"theme\"\n          defaultValue={theme}\n          placeholder=\"Theme (optional)\"\n        />\n        <input type=\"submit\" />\n      </form>\n      {fistOfFiveData.map(([level, tags]) => (\n        <div id={`level-${level}`} className=\"fist-container\">\n          <h1>{level}</h1>\n          <RandomGiphy theme={theme} tags={tags} />\n          <div className=\"next-link-container\">\n            {level > 1 && (\n              <a className=\"next-link\" href={`#level-${level - 1}`}>\n                âž¤\n              </a>\n            )}\n            {level === 1 && <a href=\"#top\">Back to Top</a>}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}